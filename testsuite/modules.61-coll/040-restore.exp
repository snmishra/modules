##############################################################################
#   Modules Release Tcl
#   Providing a flexible user environment
#
#   File:		modules.61-coll/%M%
#   Revision:		%I%
#   First Edition:	2016/08/02
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:
#   Modulefiles:
#   Sub-Command:
#
#   Comment:	%C{
#			Test the module 'restore' command
#		}C%
#
##############################################################################

set cbadnerrmsg "$error_msgs: Collection $collbadn cannot be found"
set cbadfperrmsg "$error_msgs: Collection $collbadfp cannot be found"
set cbadterrmsg "$error_msgs: Collection $colld (for target \"$colltarget\") cannot be found"
set cderrmsg "load $cdmod4"
append cderrmsg "\n\n[msg_top_restore $colld {} {} [split $cdlm :]]"
set c1errmsg "load $c1mod5\nload $c1mod6"
append c1errmsg "\n\n[msg_top_restore $coll1 {} $cdmod5 [list $c1mod5 $c1mod6]]"
set c2errmsg "unload $c1mod6\nunload $c1mod5\nunload $cdmod4\nload $c2mod4\nload $c2mod5\nload $c2mod6"
append c2errmsg "\n\n[msg_top_restore $coll2 {} [list $c1mod6 $c1mod5 $cdmod4] [list $c2mod4 $c2mod5 $c2mod6]]"
set c1errmsgf2 "unload $c2mod6\nunload $c2mod5\nunload $c2mod4\nload $cdmod4\nload $c1mod5\nload $c1mod6"
append c1errmsgf2 "\n\n[msg_top_restore $coll1fpre {} [list $c2mod6 $c2mod5 $c2mod4] [list $cdmod4 $c1mod5 $c1mod6]]"
set c3errmsg ""
set c4errmsg "unload $c2mod6\nunload $c2mod5\nunload $c2mod4"
set c5errmsg $c4errmsg
append c4errmsg "\n\n[msg_top_restore $coll4 target [lreverse [split $c2lm :]] {}]"
append c5errmsg "\n\n[msg_top_restore $coll5fpre {} [lreverse [split $c2lm :]] {}]"
set badcontfp "$homewithcoll/.Xresources"
set badcontfperrmsg "$error_msgs: $badcontfp is not a valid collection"
set c9errmsg "load $c9mod1\nload $c9mod2\nload $c9mod3"
set c10errmsg $c9errmsg
append c9errmsg "\n\n[msg_top_restore $coll9fpre {} {} [split $c9lm :]]"
append c10errmsg "\n\n[msg_top_restore $coll10fpre {} {} [split $c9lm :]]"
set c9errmsg2 "unload $c9mod3\nunload $c9mod2\nload $c9mod2\nload $c9mod3"
append c9errmsg2 "\n\n[msg_top_restore $coll9fpre {} [list $c9mod3 $c9mod2] [list $c9mod2 $c9mod3]]"
set c11errmsg "load $c11mod1\nload $c11mod2\n\n[msg_top_restore $coll11fpre {} {} [list $c11mod1 $c11mod2]]"
if {$install_autohandling eq {y}} {
#FIXME: f7 should not attempt to load f6 as f6 load was already attempted
set c12errmsg "unload $c9mod3\nunload $c9mod2\nunload $c9mod1\nload f4\nload f5\n\n[msg_load f6 [err_conlo f5]]\n\n[msg_load f6 [err_conlo f5]]\n\n[msg_load f7 [err_reqmis f6]]\n\n[msg_top_restore $coll12fpre {} [list $c9mod3 $c9mod2 $c9mod1] [list $c12mod1 $c12mod2] [err_reqlo f6]]"
} else {
set c12errmsg "unload $c9mod3\nunload $c9mod2\nunload $c9mod1\nload f4\nload f5\n\n[msg_load f6 [err_conlo f5]]\n\n[msg_load f7 [err_reqmis f6]]\n\n[msg_top_restore $coll12fpre {} [list $c9mod3 $c9mod2 $c9mod1] [list $c12mod1 $c12mod2]]"
}

# set HOME to location containing collections
set ORIG_HOME $env(HOME)
if { $verbose > 0 } {
    send_user "\tSetup HOME = $homewithcoll\n"
}
set env(HOME) "$homewithcoll"


#
# test restoring nonexistent collection
#

testouterr_cmd "ALL" "restore $collbadn" "ERR" "$cbadnerrmsg"


#
# test restoring nonexistent collection specified as a filepath
#

testouterr_cmd "ALL" "restore $collbadfp" "ERR" "$cbadfperrmsg"


#
# test showing existent file which is not a collection
#

testouterr_cmd "ALL" "restore $badcontfp" "ERR" "$badcontfperrmsg"


#
# test restoring default collection
#

# setup an empty environment
unsetenv_path_var MODULEPATH

lappend ans [list set LOADEDMODULES $cdlm]
lappend ans [list set _LMFILES_ $cdlmf]
lappend ans "(.*)"
lappend ans [list set MODULES_LMALTNAME $cdlmalt]
lappend ans "(.*)"
lappend ans [list set MODULES_LMALTNAME_modshare "(.*)"]
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans [list set MODULEPATH $cdmodpath]
lappend ans [list set LOADEDMODULES_modshare "(.*)"]
lappend ans [list set _LMFILES__modshare "(.*)"]
lappend ans [list set MODULEPATH_modshare "(.*)"]

testouterr_cmd_re "ALL" "restore" $ans "$cderrmsg"


#
# test restoring default collection saved with version pinned and with parts
# of this environment already loaded (default version comparison)
#

eval setenv_path_var MODULEPATH [split $cdmodpath ":"]
setenv_loaded_module [split $cdlm_part ":"] [split $cdlmf_part ":"]
eval setenv_path_var MODULES_LMALTNAME [split $cdlmalt_part ":"]

set ans [list]
lappend ans [list setpath MODULES_LMALTNAME $cdlmalt]
lappend ans [list setpath LOADEDMODULES $cdlm]
lappend ans [list setpath _LMFILES_ $cdlmf]

testouterr_cmd_re "sh" "restore" $ans [msg_top_restore $colld {} $cdmod5n/2.0 $cdmod5]


#
# test restoring collection that only adds path to use and mods to load
#

# fake environment state: default collection restored
setenv_loaded_module [split $cdlm ":"] [split $cdlmf ":"]
eval setenv_path_var MODULES_LMALTNAME [split $cdlmalt ":"]

set ans [list]
lappend ans [list setpath MODULES_LMALTNAME $c1lmalt]
lappend ans [list setpath MODULEPATH $c1modpath]
lappend ans [list setpath LOADEDMODULES $c1lm]
lappend ans [list setpath _LMFILES_ $c1lmf]

testouterr_cmd_re "ALL" "restore $coll1" $ans "$c1errmsg"


#
# test restoring exact same collection, nothing should happen
#

# fake environment state: $coll1 collection restored
eval setenv_path_var MODULEPATH [split $c1modpath ":"]
setenv_loaded_module [split $c1lm ":"] [split $c1lmf ":"]
eval setenv_path_var MODULES_LMALTNAME [split $c1lmalt ":"]

testouterr_cmd "ALL" "restore $coll1" "OK" ""


#
# test restoring collection unload some modules
# to reload them in correct order
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c2lm]
lappend ans [list setpath _LMFILES_ $c2lmf]

testouterr_cmd_re "ALL" "restore $coll2" $ans "$c2errmsg"


#
# test restoring collection that reorder used paths
# no change on loaded modules
#

# fake environment state: $coll2 collection restored
eval setenv_path_var MODULEPATH [split $c2modpath ":"]
setenv_loaded_module [split $c2lm ":"] [split $c2lmf ":"]
eval setenv_path_var MODULES_LMALTNAME [split $c2lmalt ":"]

set ans [list]
lappend ans [list setpath MODULEPATH $c3modpath]

testouterr_cmd_re "ALL" "restore $coll3" $ans "$c3errmsg"


#
# test restoring collection specified as filepath
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c1lm]
lappend ans [list setpath _LMFILES_ $c1lmf]

testouterr_cmd_re "ALL" "restore $coll1fp" $ans "$c1errmsgf2"


#
# test restoring collection specified as filepath when
# MODULES_COLLECTION_TARGET is set. target should be ignored
#

# setup environment state
if { $verbose > 0 } {
    send_user "\tSetup MODULES_COLLECTION_TARGET = $colltarget\n"
}
set env(MODULES_COLLECTION_TARGET) "$colltarget"

testouterr_cmd_re "ALL" "restore $coll1fp" $ans "$c1errmsgf2"


#
# test restoring collection not mentionning module to load
# when MODULES_COLLECTION_TARGET set
#

set ans [list]
lappend ans [list unset _LMFILES__modshare]
lappend ans [list unset LOADEDMODULES_modshare]
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans "(.*)"

testouterr_cmd_re "ALL" "restore $coll4" $ans "$c4errmsg"


#
# test restoring same collection than before but with a modulepath
# prepended rather appended
#

testouterr_cmd_re "ALL" "restore $coll5fp" $ans "$c5errmsg"


#
# test restoring collection mixing virtual and deep modules spread through
# different modulepaths to check correct default version is restored
#

# restore environment
unsetenv_path_var MODULEPATH
unsetenv_loaded_module
unsetenv_path_var MODULES_LMALTNAME

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c6lm]
lappend ans [list setpath _LMFILES_ $c6lmf]
lappend ans [list setpath MODULEPATH $c6modpath]
lappend ans [list setpath MODULES_LMALTNAME $c6lmalt]

testouterr_cmd_re "sh" "restore $coll6" $ans [msg_top_restore $coll6 target {} [split $c6lm :]]


#
# test restoring collection with empty element set in MODULEPATH, LOADEDMODULES
#

# restore environment
setenv_path_var MODULEPATH {} {}
setenv_loaded_module [list {} {}] [list {} {}]

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES "::$c6lm"]
lappend ans [list setpath _LMFILES_ "::$c6lmf"]
# empty dir elements are ignored but stick to the variable, they should be removed
lappend ans [list setpath MODULEPATH "::$c6modpath"]
lappend ans [list setpath MODULES_LMALTNAME $c6lmalt]

testouterr_cmd_re "sh" "restore $coll6" $ans [msg_top_restore $coll6 target {} [split $c6lm :]]


#
# test restoring collection with no modulepath and modulefiles loaded as fullpath
#

# setup environment state
unsetenv_path_var MODULEPATH
unsetenv_loaded_module

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c7lm]
lappend ans [list setpath _LMFILES_ $c7lmf]

testouterr_cmd_re "sh" "restore $coll7fp" $ans [regsub -all "\(\[.+?\]\)" [msg_top_restore $coll7fp {} {} [split $c7lm :]] {\\\1}]


#
# test restoring collection with no modulepath and modulefiles loaded as fullpath
# starting with a defined MODULEPATH
#

setenv_path_var MODULEPATH $modpath

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c7lm]
lappend ans [list setpath _LMFILES_ $c7lmf]
lappend ans [list unsetpath MODULEPATH]

testouterr_cmd_re "sh" "restore $coll7fp" $ans [regsub -all "\(\[.+?\]\)" [msg_top_restore $coll7fp {} {} [split $c7lm :]] {\\\1}]


#
# test restoring collection with a modulepath and modulefiles loaded as fullpath
#

unsetenv_path_var MODULEPATH

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c8lm]
lappend ans [list setpath _LMFILES_ $c8lmf]
lappend ans [list setpath MODULEPATH $c8modpath]

testouterr_cmd_re "sh" "restore $coll8fp" $ans [regsub -all "\(\[.+?\]\)" [msg_top_restore $coll8fp {} {} [split $c8lm :]] {\\\1}]


#
# test restoring collection with some modulefiles loaded not asked by user
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c9lm]
lappend ans [list setpath _LMFILES_ $c9lmf]
lappend ans [list setpath MODULEPATH $c9modpath]
lappend ans [list setpath MODULES_LMNOTUASKED $c9lmnua]

testouterr_cmd_re "sh" "restore $coll9fp" $ans $c9errmsg


#
# test restoring collection with some modulefiles loaded not asked by user
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c9lm]
lappend ans [list setpath _LMFILES_ $c9lmf]
lappend ans [list setpath MODULEPATH $c9modpath]
lappend ans [list setpath MODULES_LMNOTUASKED $c9lmnua]

testouterr_cmd_re "sh" "restore $coll10fp" $ans $c10errmsg


#
# test restoring collection with some modulefiles loaded not asked by user
# from a situation where all modulefiles where loaded asked by user
#

eval setenv_path_var MODULEPATH [split $c9modpath ":"]
setenv_loaded_module [split $c9lm ":"] [split $c9lmf ":"]

set ans [list]
lappend ans [list setpath LOADEDMODULES $c9lm]
lappend ans [list setpath _LMFILES_ $c9lmf]
lappend ans [list setpath MODULES_LMNOTUASKED $c9lmnua]

testouterr_cmd_re "sh" "restore $coll9fp" $ans $c9errmsg2


#
# test restoring collection with some modulefiles loaded not asked by user
# from a situation where not user asked information is already correct
#

eval setenv_path_var MODULEPATH [split $c9modpath ":"]
setenv_loaded_module [split $c9lm ":"] [split $c9lmf ":"] [split $c9lmnua ":"]

testouterr_cmd_re "sh" "restore $coll9fp" "" ""


#
# test restoring collection in which a modulefile has 'module load' dependency
# to another modulefile
#

setenv_path_var MODULEPATH [split $c11modpath :]
unsetenv_loaded_module

set ans [list]
lappend ans [list setpath LOADEDMODULES $c11lm]
lappend ans [list setpath _LMFILES_ $c11lmf]
lappend ans [list setpath MODULES_LMNOTUASKED $c11lmnua]
lappend ans [list setpath MODULES_LMPREREQ $c11mod2&$c11mod1]
testouterr_cmd_re sh "restore $coll11fp" $ans $c11errmsg


#
# test restoring collection with incompatible modulefiles saved in it (which
# should not be possible)
#

eval setenv_path_var MODULEPATH [split $c9modpath ":"]
setenv_loaded_module [split $c9lm ":"] [split $c9lmf ":"]

set ans [list]
lappend ans [list setpath MODULEPATH $c12modpath]
lappend ans [list setpath LOADEDMODULES $c12lm]
lappend ans [list setpath _LMFILES_ $c12lmf]
lappend ans [list ERR]
testouterr_cmd_re sh "restore $coll12fp" $ans $c12errmsg


#
# test restoring nonexistent default collection when
# MODULES_COLLECTION_TARGET is set
#

testouterr_cmd "ALL" "restore" "ERR" "$cbadterrmsg"


#
# test unsetting HOME
#

if { $verbose > 0 } {
    send_user "\tUnset HOME \n"
}
unset env(HOME)

testouterr_cmd "sh" "restore" "ERR" $nohomeerrmsg

# restore default testsuite home
if { $verbose > 0 } {
    send_user "\tRestore HOME = $ORIG_HOME\n"
}
set env(HOME) $ORIG_HOME


#
# test when loaded environment is inconsistent
#

setenv_loaded_module [list foo bar] "/path/to/foo"

testouterr_cmd "sh" "restore $coll8fp" "ERR" "$err_loinconsist\n  LOADEDMODULES=foo bar\n  _LMFILES_=/path/to/foo"


#
# test use of restore command from a modulefile to check
# unload and load messages produced by this command in this context
#

# set HOME to location containing collections
setenv_var HOME $hometestcoll

setenv_loaded_module [split $cdlm ":"] [split $cdlmf ":"]
unsetenv_var MODULES_COLLECTION_TARGET

set ans [list]
lappend ans [list setpath MODULEPATH $modpath:$modpath.other]
lappend ans [list setpath LOADEDMODULES $c2lm:$modpath.other/restore]
lappend ans [list setpath _LMFILES_ $c2lmf:$modpath.other/restore]

# restore command disturbs main module load report
testouterr_cmd_re sh "load $modpath.other/restore" $ans "unload coll/a\nload coll/c\nload coll/a\nload coll/b\n\n[msg_load $modpathre.other/restore {Unloading module: loc_dv2/1.0 coll/a} {Loading module: coll/c coll/a coll/b}]"


#
# Cleanup
#

# restore environment
# _LMFILES_ and LOADEDMODULES already restored during last test
unsetenv_var MODULES_COLLECTION_TARGET
setenv_path_var MODULEPATH $modpath
unsetenv_loaded_module

setenv_var HOME $ORIG_HOME
unset ORIG_HOME

unset ans

unset cbadnerrmsg
unset cbadfperrmsg
unset cbadterrmsg
unset cderrmsg
unset c1errmsg
unset c2errmsg
unset c1errmsgf2
unset c3errmsg
unset c4errmsg
unset c5errmsg
unset c9errmsg
unset c10errmsg
unset c9errmsg2
unset c11errmsg
unset c12errmsg
unset badcontfp
unset badcontfperrmsg

